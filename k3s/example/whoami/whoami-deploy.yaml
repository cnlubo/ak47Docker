apiVersion: v1
kind: Namespace
metadata:
  name: whoami
  labels:
    app.kubernetes.io/instance: whoami
    app.kubernetes.io/name: whoami
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: whoami
  namespace: whoami
  labels:
    app: whoami
spec:
  selector:
    matchLabels:
      app: whoami
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: whoami
    spec:
      # initContainers:
      # Init containers are exactly like regular containers, except:
      # - Init containers always run to completion.
      # - Each init container must complete successfully before the next one starts.
      containers:
        - name: whoami-container
          image: containous/whoami
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
            limits:
              cpu: 100m
              memory: 200Mi
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
          ports:
            - containerPort: 80
              name: whoami
          volumeMounts:
            - name: localtime
              mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: whoami-service
  namespace: whoami
spec:
  selector:
    app: whoami
  type: LoadBalancer
  sessionAffinity: None
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
      # If you set the `spec.type` field to `NodePort` and you want a specific port number,
      # you can specify a value in the `spec.ports[*].nodePort` field.
      # nodePort:
---
# https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: whoami-ingress
#   namespace: whoami
#   annotations:
#     ingressclass.kubernetes.io/is-default-class: "true"
#     nginx.ingress.kubernetes.io/rewrite-target: "/"
# spec:
#   rules:
#     - host: test123.com
#       http:
#         paths:
#           - path: /whoami
#             pathType: Prefix
#             backend:
#               service:
#                 name: whoami-service
#                 port:
#                   number: 80
# https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource

# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: whoami-ingress
#   namespace: whoami
# spec:
#   # ingressClassName: "nginx"
#   rules:
#     - host: test123.com
#       http:
#         paths:
#           - path: /whoami
#             pathType: Prefix
#             backend:
#               service:
#                 name: whoami-service
#                 port:
#                   number: 80
